package com.iitkgp.amritha.sensordatafilter;

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;

import mr.go.sgfilter.SGFilter;
import com.jjoe64.graphview.GraphView;
import com.jjoe64.graphview.series.DataPoint;
import com.jjoe64.graphview.series.LineGraphSeries;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import mr.go.sgfilter.ContinuousPadder;
import mr.go.sgfilter.MeanValuePadder;

public class GraphActivity extends AppCompatActivity {
    ArrayList<Float> floatPointList;
    ArrayList<Float> filteredXData = new ArrayList<Float>();

    Double[][] sgolayCoefficients = {{0.56102, 0.36581, 0.21444, 0.10091, 0.019622, -0.034652, -0.066737, -0.081076, -0.081723, -0.072343, -0.056214, -0.036226, -0.014878, 0.0057142, 0.023827, 0.038123, 0.047654, 0.051859, 0.050565, 0.043988, 0.032732, 0.017789, 0.00053907, -0.01725, -0.033422, -0.045433, -0.050349, -0.044851, -0.025229, 0.012614, 0.073163},
            {0.36581, 0.26837, 0.18921, 0.12614, 0.077087, 0.040107, 0.013391, -0.0047438, -0.015849, -0.021347, -0.022533, -0.020571, -0.016496, -0.011213, -0.0054985, -8.3267e-17, 0.0047654, 0.0084095, 0.010674, 0.011428, 0.010674, 0.0085389, 0.0052829, 0.0012938, -0.002911, -0.0066845, -0.0092505, -0.0097033, -0.0070079, -1.1796e-16, 0.012614},
            {0.21444, 0.18921, 0.16398, 0.13919, 0.11527, 0.092568, 0.071403, 0.052036, 0.034683, 0.019507, 0.006625, -0.0038962, -0.012039, -0.017834, -0.021362, -0.022753, -0.022184, -0.019883, -0.016128, -0.011242, -0.0056026, 0.00036806, 0.0061967, 0.011361, 0.015291, 0.017366, 0.016916, 0.013223, 0.0055208, -0.0070079, -0.025229},
            {0.10091, 0.12614, 0.13919, 0.14223, 0.13726, 0.12613, 0.11052, 0.091962, 0.071815, 0.051282, 0.031407, 0.013072, -0.0030039, -0.016258, -0.026292, -0.032865, -0.035898, -0.035475, -0.031836, -0.025385, -0.016685, -0.0064614, 0.0044018, 0.014859, 0.023704, 0.029571, 0.030932, 0.026099, 0.013223, -0.0097033, -0.044851},
            {0.019622, 0.077087, 0.11527, 0.13726, 0.14593, 0.14395, 0.13375, 0.11756, 0.097377, 0.074993, 0.051978, 0.029682, 0.0092423, -0.0084256, -0.022622, -0.032865, -0.03889, -0.040651, -0.038319, -0.032282, -0.023147, -0.011737, 0.00090589, 0.013523, 0.024637, 0.032554, 0.035362, 0.030932, 0.016916, -0.0092505, -0.050349},
            {-0.034652, 0.040107, 0.092568, 0.12613, 0.14395, 0.14897, 0.1439, 0.13119, 0.11309, 0.091605, 0.068516, 0.045364, 0.023463, 0.0038937, -0.012493, -0.025078, -0.033476, -0.037529, -0.037315, -0.03314, -0.025543, -0.015295, -0.0033968, 0.0089176, 0.020184, 0.028705, 0.032554, 0.029571, 0.017366, -0.0066845, -0.045433},
            {-0.066737, 0.013391, 0.071403, 0.11052, 0.13375, 0.1439, 0.14353, 0.13503, 0.12055, 0.10203, 0.081218, 0.059621, 0.038549, 0.019098, 0.0021489, -0.011629, -0.021779, -0.028058, -0.030433, -0.029088, -0.024414, -0.017021, -0.0077255, 0.0024388, 0.012228, 0.020184, 0.024637, 0.023704, 0.015291, -0.002911, -0.033422},
            {-0.081076, -0.0047438, 0.052036, 0.091962, 0.11756, 0.13119, 0.13503, 0.1311, 0.12125, 0.10715, 0.090296, 0.072035, 0.053524, 0.035755, 0.01955, 0.0055617, -0.0057303, -0.014015, -0.019154, -0.021176, -0.020284, -0.016849, -0.011413, -0.0046893, 0.0024388, 0.0089176, 0.013523, 0.014859, 0.011361, 0.0012938, -0.01725},
            {-0.081723, -0.015849, 0.034683, 0.071815, 0.097377, 0.11309, 0.12055, 0.12125, 0.11656, 0.10776, 0.095981, 0.082266, 0.067536, 0.0526, 0.038153, 0.024775, 0.012935, 0.0029878, -0.0048264, -0.01038, -0.013659, -0.014763, -0.013906, -0.011413, -0.0077255, -0.0033968, 0.00090589, 0.0044018, 0.0061967, 0.0052829, 0.00053907},
            {-0.072343, -0.021347, 0.019507, 0.051282, 0.074993, 0.091605, 0.10203, 0.10715, 0.10776, 0.10464, 0.098516, 0.090051, 0.079868, 0.06854, 0.056591, 0.044494, 0.032675, 0.021511, 0.011328, 0.0024046, -0.0050301, -0.010796, -0.014763, -0.016849, -0.017021, -0.015295, -0.011737, -0.0064614, 0.00036806, 0.0085389, 0.017789},
            {-0.056214, -0.022533, 0.006625, 0.031407, 0.051978, 0.068516, 0.081218, 0.090296, 0.095981, 0.098516, 0.098165, 0.095204, 0.089928, 0.082649, 0.073693, 0.063404, 0.052141, 0.040282, 0.028218, 0.016358, 0.0051282, -0.0050301, -0.013659, -0.020284, -0.024414, -0.025543, -0.023147, -0.016685, -0.0056026, 0.010674, 0.032732},
            {-0.036226, -0.020571, -0.0038962, 0.013072, 0.029682, 0.045364, 0.059621, 0.072035, 0.082266, 0.090051, 0.095204, 0.097616, 0.097256, 0.09417, 0.088482, 0.080392, 0.070179, 0.058197, 0.044881, 0.030738, 0.016358, 0.0024046, -0.01038, -0.021176, -0.029088, -0.03314, -0.032282, -0.025385, -0.011242, 0.011428, 0.043988},
            {-0.014878, -0.016496, -0.012039, -0.0030039, 0.0092423, 0.023463, 0.038549, 0.053524, 0.067536, 0.079868, 0.089928, 0.097256, 0.10152, 0.10252, 0.10017, 0.094549, 0.085828, 0.074324, 0.060484, 0.044881, 0.028218, 0.011328, -0.0048264, -0.019154, -0.030433, -0.037315, -0.038319, -0.031836, -0.016128, 0.010674, 0.050565},
            {0.0057142, -0.011213, -0.017834, -0.016258, -0.0084256, 0.0038937, 0.019098, 0.035755, 0.0526, 0.06854, 0.082649, 0.09417, 0.10252, 0.10727, 0.10818, 0.10517, 0.098321, 0.087897, 0.074324, 0.058197, 0.040282, 0.021511, 0.0029878, -0.014015, -0.028058, -0.037529, -0.040651, -0.035475, -0.019883, 0.0084095, 0.051859},
            {0.023827, -0.0054985, -0.021362, -0.026292, -0.022622, -0.012493, 0.0021489, 0.01955, 0.038153, 0.056591, 0.073693, 0.088482, 0.10017, 0.10818, 0.1121, 0.11174, 0.10708, 0.098321, 0.085828, 0.070179, 0.052141, 0.032675, 0.012935, -0.0057303, -0.021779, -0.033476, -0.03889, -0.035898, -0.022184, 0.0047654, 0.047654},
            {0.038123, -8.3267e-17, -0.022753, -0.032865, -0.032865, -0.025078, -0.011629, 0.0055617, 0.024775, 0.044494, 0.063404, 0.080392, 0.094549, 0.10517, 0.11174, 0.11397, 0.11174, 0.10517, 0.094549, 0.080392, 0.063404, 0.044494, 0.024775, 0.0055617, -0.011629, -0.025078, -0.032865, -0.032865, -0.022753, 2.4286e-17, 0.038123},
            {0.047654, 0.0047654, -0.022184, -0.035898, -0.03889, -0.033476, -0.021779, -0.0057303, 0.012935, 0.032675, 0.052141, 0.070179, 0.085828, 0.098321, 0.10708, 0.11174, 0.1121, 0.10818, 0.10017, 0.088482, 0.073693, 0.056591, 0.038153, 0.01955, 0.0021489, -0.012493, -0.022622, -0.026292, -0.021362, -0.0054985, 0.023827},
            {0.051859, 0.0084095, -0.019883, -0.035475, -0.040651, -0.037529, -0.028058, -0.014015, 0.0029878, 0.021511, 0.040282, 0.058197, 0.074324, 0.087897, 0.098321, 0.10517, 0.10818, 0.10727, 0.10252, 0.09417, 0.082649, 0.06854, 0.0526, 0.035755, 0.019098, 0.0038937, -0.0084256, -0.016258, -0.017834, -0.011213, 0.0057142},
            {0.050565, 0.010674, -0.016128, -0.031836, -0.038319, -0.037315, -0.030433, -0.019154, -0.0048264, 0.011328, 0.028218, 0.044881, 0.060484, 0.074324, 0.085828, 0.094549, 0.10017, 0.10252, 0.10152, 0.097256, 0.089928, 0.079868, 0.067536, 0.053524, 0.038549, 0.023463, 0.0092423, -0.0030039, -0.012039, -0.016496, -0.014878},
            {0.043988, 0.011428, -0.011242, -0.025385, -0.032282, -0.03314, -0.029088, -0.021176, -0.01038, 0.0024046, 0.016358, 0.030738, 0.044881, 0.058197, 0.070179, 0.080392, 0.088482, 0.09417, 0.097256, 0.097616, 0.095204, 0.090051, 0.082266, 0.072035, 0.059621, 0.045364, 0.029682, 0.013072, -0.0038962, -0.020571, -0.036226},
            {0.032732, 0.010674, -0.0056026, -0.016685, -0.023147, -0.025543, -0.024414, -0.020284, -0.013659, -0.0050301, 0.0051282, 0.016358, 0.028218, 0.040282, 0.052141, 0.063404, 0.073693, 0.082649, 0.089928, 0.095204, 0.098165, 0.098516, 0.095981, 0.090296, 0.081218, 0.068516, 0.051978, 0.031407, 0.006625, -0.022533, -0.056214},
            {0.017789, 0.0085389, 0.00036806, -0.0064614, -0.011737, -0.015295, -0.017021, -0.016849, -0.014763, -0.010796, -0.0050301, 0.0024046, 0.011328, 0.021511, 0.032675, 0.044494, 0.056591, 0.06854, 0.079868, 0.090051, 0.098516, 0.10464, 0.10776, 0.10715, 0.10203, 0.091605, 0.074993, 0.051282, 0.019507, -0.021347, -0.072343},
            {0.00053907, 0.0052829, 0.0061967, 0.0044018, 0.00090589, -0.0033968, -0.0077255, -0.011413, -0.013906, -0.014763, -0.013659, -0.01038, -0.0048264, 0.0029878, 0.012935, 0.024775, 0.038153, 0.0526, 0.067536, 0.082266, 0.095981, 0.10776, 0.11656, 0.12125, 0.12055, 0.11309, 0.097377, 0.071815, 0.034683, -0.015849, -0.081723},
            {-0.01725, 0.0012938, 0.011361, 0.014859, 0.013523, 0.0089176, 0.0024388, -0.0046893, -0.011413, -0.016849, -0.020284, -0.021176, -0.019154, -0.014015, -0.0057303, 0.0055617, 0.01955, 0.035755, 0.053524, 0.072035, 0.090296, 0.10715, 0.12125, 0.1311, 0.13503, 0.13119, 0.11756, 0.091962, 0.052036, -0.0047438, -0.081076},
            {-0.033422, -0.002911, 0.015291, 0.023704, 0.024637, 0.020184, 0.012228, 0.0024388, -0.0077255, -0.017021, -0.024414, -0.029088, -0.030433, -0.028058, -0.021779, -0.011629, 0.0021489, 0.019098, 0.038549, 0.059621, 0.081218, 0.10203, 0.12055, 0.13503, 0.14353, 0.1439, 0.13375, 0.11052, 0.071403, 0.013391, -0.066737},
            {-0.045433, -0.0066845, 0.017366, 0.029571, 0.032554, 0.028705, 0.020184, 0.0089176, -0.0033968, -0.015295, -0.025543, -0.03314, -0.037315, -0.037529, -0.033476, -0.025078, -0.012493, 0.0038937, 0.023463, 0.045364, 0.068516, 0.091605, 0.11309, 0.13119, 0.1439, 0.14897, 0.14395, 0.12613, 0.092568, 0.040107, -0.034652},
            {-0.050349, -0.0092505, 0.016916, 0.030932, 0.035362, 0.032554, 0.024637, 0.013523, 0.00090589, -0.011737, -0.023147, -0.032282, -0.038319, -0.040651, -0.03889, -0.032865, -0.022622, -0.0084256, 0.0092423, 0.029682, 0.051978, 0.074993, 0.097377, 0.11756, 0.13375, 0.14395, 0.14593, 0.13726, 0.11527, 0.077087, 0.019622},
            {-0.044851, -0.0097033, 0.013223, 0.026099, 0.030932, 0.029571, 0.023704, 0.014859, 0.0044018, -0.0064614, -0.016685, -0.025385, -0.031836, -0.035475, -0.035898, -0.032865, -0.026292, -0.016258, -0.0030039, 0.013072, 0.031407, 0.051282, 0.071815, 0.091962, 0.11052, 0.12613, 0.13726, 0.14223, 0.13919, 0.12614, 0.10091},
            {-0.025229, -0.0070079, 0.0055208, 0.013223, 0.016916, 0.017366, 0.015291, 0.011361, 0.0061967, 0.00036806, -0.0056026, -0.011242, -0.016128, -0.019883, -0.022184, -0.022753, -0.021362, -0.017834, -0.012039, -0.0038962, 0.006625, 0.019507, 0.034683, 0.052036, 0.071403, 0.092568, 0.11527, 0.13919, 0.16398, 0.18921, 0.21444},
            {0.012614, -1.1796e-16, -0.0070079, -0.0097033, -0.0092505, -0.0066845, -0.002911, 0.0012938, 0.0052829, 0.0085389, 0.010674, 0.011428, 0.010674, 0.0084095, 0.0047654, 2.4286e-17, -0.0054985, -0.011213, -0.016496, -0.020571, -0.022533, -0.021347, -0.015849, -0.0047438, 0.013391, 0.040107, 0.077087, 0.12614, 0.18921, 0.26837, 0.36581},
            {0.073163, 0.012614, -0.025229, -0.044851, -0.050349, -0.045433, -0.033422, -0.01725, 0.00053907, 0.017789, 0.032732, 0.043988, 0.050565, 0.051859, 0.047654, 0.038123, 0.023827, 0.0057142, -0.014878, -0.036226, -0.056214, -0.072343, -0.081723, -0.081076, -0.066737, -0.034652, 0.019622, 0.10091, 0.21444, 0.36581, 0.56102}};


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_graph);

        floatPointList = new ArrayList<Float>();
        floatPointList = (ArrayList<Float>) getIntent().getSerializableExtra("sensorXData");
        //SGolayFilter(floatPointList);

        float[] data = new float[floatPointList.size()];
        for (int i = 0; i < floatPointList.size(); i++)
            data[i] = Float.parseFloat(Float.toString(floatPointList.get(i)));
        float[] leftPad = new float[] { 8915.06f, 8845.53f, 9064.17f, 8942.09f, 8780.87f };
        double[] coeffs = SGFilter.computeSGCoefficients(5, 31, 4);
        ContinuousPadder padder1 = new ContinuousPadder();
        SGFilter sgFilter = new SGFilter(5, 31);
        sgFilter.appendPreprocessor(padder1);
        float[] smooth = sgFilter.smooth(data, leftPad, new float[0], coeffs);
        MeanValuePadder padder2 = new MeanValuePadder(10, false, true);
        sgFilter.removePreprocessor(padder1);
        sgFilter.appendPreprocessor(padder2);
        smooth = sgFilter.smooth(data, leftPad, new float[0], coeffs);


        DataPoint dataPoints[] = new DataPoint[floatPointList.size()];//filteredXData.length];
        for (int i = 0; i < floatPointList.size(); i++) {
            DataPoint point = new DataPoint(i, floatPointList.get(i));
            dataPoints[i] = point;
        }


        /*DataPoint dataPoints[] = new DataPoint[smooth.length];//filteredXData.length];
        for (int i = 0; i < smooth.length; i++) {
            DataPoint point = new DataPoint(i, smooth[i]);
            dataPoints[i] = point;
        }*/

        GraphView graph = (GraphView) findViewById(R.id.graph);
        LineGraphSeries<DataPoint> series = new LineGraphSeries<DataPoint>(dataPoints);
        graph.addSeries(series);
    }

    public void SGolayFilter(ArrayList<Double> sensorXData) {
       // SGFilter filter = new SGFilter(4, 31);
       // double[] coefficients = SGFilter.computeSGCoefficients(5, 5, 4);

       // ArrayList<Double> coefficientList = new ArrayList<Double>();
       // for (int i=0;i<coefficients.length;i++)
        //    coefficientList.set(i,coefficients[i]);

        /*double array[] = new double[sensorXData.size()];
        for (int i = 0; i < sensorXData.size(); i++)
            array[i] = Double.parseDouble(Float.toString(sensorXData.get(i)));*/
       // filteredXData = filter.smooth(array, coefficients);
       // filteredXData = convolution(sensorXData, sgolayCoefficients);
    }

    /*ArrayList<Double> convolution(ArrayList<Double> xv, Double[][] yv) {
        int xLength = xv.size();
        int yLength = yv.length;
        int numberOfSamples = yLength + xLength - 1;

        ArrayList<Double> result = new ArrayList<Double>(numberOfSamples);
        Collections.fill(result, 0.0);

        if (xLength < yLength)
            xv.addAll(Collections.nCopies(yLength - xLength, 0.0));
        else if (yLength < xLength)
          //  yv.addAll(Collections.nCopies(xLength - yLength, 0.0));


        for (int i = 0; i < numberOfSamples; i++) {
            double sum = 0;
            if (i < xLength)
                for (int k = 1; k < i; k++)
                    sum = sum + xv.get(k) * yv[i - k + 1];

            else
                for (int k = xLength; k > i - xLength + 1; k--)
                    sum = sum + yv.get(k) * xv.get(i - k + 1);
            result.set(i, sum);
        }

        return result;

    }*/
}
